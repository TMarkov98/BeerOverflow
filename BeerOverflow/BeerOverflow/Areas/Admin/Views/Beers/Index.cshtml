@model PaginatedList<BeerOverflow.Models.Beer>
@using BeerOverflow.Web

@{
    ViewData["Title"] = "Beers";
}

<h1>Beers</h1>

<p>
    <a class="btn btn-warning" asp-action="Create">Create Beer</a>
</p>
<form asp-controller="Beers" asp-action="Index">
    <p>
        Find Beer: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
        <input type="submit" value="Search" class="btn btn-warning" />
        <a asp-action="Index" class="btn btn-danger">Back to Full List</a>
    </p>
</form>
@if (Model.FirstOrDefault() == null)
{
    <h4 class="text-danger">No Beers Found with this criteria.</h4>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th />
                <th>
                    Name
                </th>
                <th>
                    Type
                </th>
                <th>
                    Brewery
                </th>
                <th>
                    AlcoholByVolume
                </th>
                <th>
                    CreatedOn
                </th>
                <th>
                    ModifiedOn
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td align="center">
                        <img src=@Html.DisplayFor(modelItem => item.ImgUrl) height="125">
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Type.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Brewery.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AlcoholByVolume)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedOn)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifiedOn)
                    </td>
                    <td>
                        <a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                        <a class="btn btn-warning" asp-action="Details" asp-route-id="@item.Id">Details</a>
                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        <p> </p>
                        <a class="btn btn-warning" asp-action="AddToWishlist" asp-route-id="@item.Id">Add To Wishlist</a>
                        <a class="btn btn-warning" asp-action="AddToBeersDrank" asp-route-id="@item.Id">Add To Beers Drank</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-warning @prevDisabled">
        Previous
    </a>
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-warning @nextDisabled">
        Next
    </a>
